{"ast":null,"code":"var _jsxFileName = \"/Users/jorgezozaya/Downloads/Abaraja\\u0301me/freelance/my-app-wp-test/src/components/bookingControls/EachBookingComponent.js\";\nimport React, { useState, useEffect } from 'react';\nimport DayPicker from \"react-day-picker\";\nimport { TimeOption } from \"./TimeOption\";\nlet dateAvailable = new Date();\nlet dateSuggested = new Date();\nconst dateOptions = {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n};\nconst timeOptions = [{\n  startAt: '7:00',\n  endAt: '9:00'\n}, {\n  startAt: '7:30',\n  endAt: '9:30'\n}, {\n  startAt: '8:00',\n  endAt: '10:00'\n}, {\n  startAt: '8:30',\n  endAt: '10:30'\n}, {\n  startAt: '9:00',\n  endAt: '11:00'\n}];\nexport const EachBookingComponent = ({\n  formData,\n  controlType,\n  updateStateSchedulingStart,\n  updateStateSchedulingTime,\n  currentDate,\n  startingTime,\n  endingTime,\n  enabled\n}) => {\n  const [selectedTime, setSelectedTime] = useState(null);\n  const [selectedTimeStart, setSelectedTimeStart] = useState(startingTime);\n  const [selectedTimeEnd, setSelectedTimeEnd] = useState(endingTime);\n  const [dateDropOff, setDateDropOff] = useState('');\n  const [openTimeLayerDrop, setOpenTimeLayerDrop] = useState(false);\n  const [showResumeInfo, setShowResumeInfo] = useState(false);\n\n  const addWeeks = (dt, n) => {\n    if (n) {\n      return new Date(dt.setDate(dt.getDate() + n * 7));\n    }\n\n    return new Date(dt.setDate(dt.getDate() + 1));\n  };\n\n  const getNumberOfWeeks = () => {\n    let maxNumber = 0;\n    let arrWeek = [formData.box25totes, formData.box35totes, formData.box50totes, formData.box70totes, formData.handleCart, formData.kingcart];\n    arrWeek.forEach(function (word) {\n      if (word !== null && word > maxNumber) {\n        maxNumber = word;\n      }\n    });\n    return maxNumber + 1;\n  };\n\n  let openDetailedBooking = 'bookingComponent';\n\n  if (showResumeInfo) {\n    openDetailedBooking = 'bookingComponent openDetailedBooking';\n  }\n\n  let layerClassListDrop = 'calendarAndTimeWrap';\n\n  if (openTimeLayerDrop) {\n    layerClassListDrop = 'calendarAndTimeWrap timeOn';\n  }\n\n  let calendarControlClasses = 'calendarLayer';\n\n  if (!enabled) {\n    calendarControlClasses = 'calendarLayer disabled';\n  } else {\n    dateAvailable = controlType === 'end' ? addWeeks(new Date(formData.dateDropOff)) : new Date();\n    dateSuggested = addWeeks(new Date(formData.dateDropOff), getNumberOfWeeks());\n  }\n\n  const handleDayDropOff = (day, {\n    selected\n  }) => {\n    setOpenTimeLayerDrop(true);\n    setDateDropOff(day.toLocaleDateString(undefined, dateOptions));\n  };\n\n  const closeCalendar = () => {\n    setOpenTimeLayerDrop(false);\n    setShowResumeInfo(true);\n    updateStateSchedulingStart({\n      kind: controlType,\n      stringDate: dateDropOff\n    });\n  };\n\n  const changeSelectedTime = key => {\n    setSelectedTime(key);\n    setSelectedTimeStart(timeOptions[key].startAt);\n    setSelectedTimeEnd(timeOptions[key].endAt);\n    updateStateSchedulingTime({\n      kind: controlType,\n      stringTimeStart: timeOptions[key].startAt,\n      stringTimeEnd: timeOptions[key].endAt\n    });\n  };\n\n  const resetControl = () => {\n    setShowResumeInfo(false);\n\n    if (controlType === 'start') {\n      updateStateSchedulingStart({\n        kind: 'end',\n        stringDate: null\n      });\n      setSelectedTime(null);\n    }\n  };\n\n  let tabsContent = timeOptions.map((timeOpt, index) => {\n    return React.createElement(TimeOption, {\n      listClasses: selectedTime === index ? 'timeOption openSelectedDetail' : 'timeOption',\n      key: index,\n      trackKey: index,\n      startAt: timeOpt.startAt,\n      endAt: timeOpt.endAt,\n      changeSelectedTime: changeSelectedTime,\n      closeCalendar: closeCalendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    });\n  });\n  useEffect(() => {\n    if (currentDate !== null) {\n      setOpenTimeLayerDrop(false);\n      setShowResumeInfo(true);\n      setDateDropOff(currentDate);\n    } else {\n      if (controlType === 'end') {\n        setShowResumeInfo(false);\n        setSelectedTime(null);\n      }\n    }\n  }, [currentDate]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: openDetailedBooking,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dateAndTimeSelected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"dateSelected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, dateDropOff, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), \"bwtween \", selectedTimeStart, \" am - \", selectedTimeEnd, \" am\"), React.createElement(\"span\", {\n    className: \"iconEditTime\",\n    onClick: () => resetControl(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: layerClassListDrop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: calendarControlClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(DayPicker, {\n    onDayClick: handleDayDropOff // modifiers={{\n    //     sunday: day => day.getDay() === 6,\n    // }}\n    ,\n    disabledDays: [{\n      before: dateAvailable\n    }, {\n      daysOfWeek: [0, 5]\n    }] // selectedDays={dateSuggested}\n    ,\n    selectedDays: [{\n      after: new Date(2020, 2, 20),\n      before: new Date(2020, 2, 25)\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"hideCalendar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"timeLayer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"dateSelected\",\n    onClick: () => setOpenTimeLayerDrop(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"<\"), \"  \", dateDropOff), React.createElement(\"div\", {\n    className: \"timeOptionsWrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, tabsContent)))));\n};","map":{"version":3,"sources":["/Users/jorgezozaya/Downloads/Abarajáme/freelance/my-app-wp-test/src/components/bookingControls/EachBookingComponent.js"],"names":["React","useState","useEffect","DayPicker","TimeOption","dateAvailable","Date","dateSuggested","dateOptions","weekday","year","month","day","timeOptions","startAt","endAt","EachBookingComponent","formData","controlType","updateStateSchedulingStart","updateStateSchedulingTime","currentDate","startingTime","endingTime","enabled","selectedTime","setSelectedTime","selectedTimeStart","setSelectedTimeStart","selectedTimeEnd","setSelectedTimeEnd","dateDropOff","setDateDropOff","openTimeLayerDrop","setOpenTimeLayerDrop","showResumeInfo","setShowResumeInfo","addWeeks","dt","n","setDate","getDate","getNumberOfWeeks","maxNumber","arrWeek","box25totes","box35totes","box50totes","box70totes","handleCart","kingcart","forEach","word","openDetailedBooking","layerClassListDrop","calendarControlClasses","handleDayDropOff","selected","toLocaleDateString","undefined","closeCalendar","kind","stringDate","changeSelectedTime","key","stringTimeStart","stringTimeEnd","resetControl","tabsContent","map","timeOpt","index","before","daysOfWeek","after"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DayPicker from \"react-day-picker\";\nimport { TimeOption } from \"./TimeOption\"\nlet dateAvailable = new Date();\nlet dateSuggested = new Date();\nconst dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nconst timeOptions = [\n    {startAt: '7:00', endAt: '9:00'},\n    {startAt: '7:30', endAt: '9:30'},\n    {startAt: '8:00', endAt: '10:00'},\n    {startAt: '8:30', endAt: '10:30'},\n    {startAt: '9:00', endAt: '11:00'}\n];\n\nexport const EachBookingComponent = ({  formData,\n                                        controlType, \n                                        updateStateSchedulingStart, \n                                        updateStateSchedulingTime, \n                                        currentDate, \n                                        startingTime, \n                                        endingTime, \n                                        enabled }) => {\n\n    const [selectedTime, setSelectedTime] = useState(null);\n    const [selectedTimeStart, setSelectedTimeStart] = useState(startingTime);\n    const [selectedTimeEnd, setSelectedTimeEnd] = useState(endingTime);\n    const [dateDropOff, setDateDropOff] = useState('');\n    const [openTimeLayerDrop, setOpenTimeLayerDrop] = useState(false);\n    const [showResumeInfo, setShowResumeInfo] = useState(false);\n    \n    const addWeeks = (dt, n) => {\n        if(n){\n            return new Date(dt.setDate(dt.getDate() + (n * 7)));\n        }\n        return new Date(dt.setDate(dt.getDate() + 1));\n    }\n\n    const getNumberOfWeeks = () => {\n        let maxNumber = 0\n        let arrWeek = [ formData.box25totes, \n                        formData.box35totes, \n                        formData.box50totes,\n                        formData.box70totes,\n                        formData.handleCart,\n                        formData.kingcart\n                        ];\n\n        arrWeek.forEach(function(word) {\n            if (word !== null && word > maxNumber) {\n                maxNumber = word\n            }\n        });\n                        \n        return maxNumber + 1\n    }\n\n    let openDetailedBooking = 'bookingComponent'\n\n    if(showResumeInfo){\n        openDetailedBooking = 'bookingComponent openDetailedBooking'\n    }\n    \n    let layerClassListDrop = 'calendarAndTimeWrap'\n\n    if(openTimeLayerDrop){\n        layerClassListDrop = 'calendarAndTimeWrap timeOn'\n    }\n\n    let calendarControlClasses = 'calendarLayer'\n\n    if( !enabled){\n        calendarControlClasses = 'calendarLayer disabled'\n\n    }else{\n        dateAvailable = (controlType === 'end') ? \n                                                    addWeeks(new Date(formData.dateDropOff) )  \n                                                :   new Date()\n\n        dateSuggested = addWeeks(new Date(formData.dateDropOff), getNumberOfWeeks() )\n    }\n    \n    const handleDayDropOff = (day, { selected }) => {\n        setOpenTimeLayerDrop(true)\n        setDateDropOff(day.toLocaleDateString(undefined, dateOptions))\n    };\n\n    const closeCalendar = () => {\n        setOpenTimeLayerDrop(false)\n        setShowResumeInfo(true)\n        updateStateSchedulingStart({kind: controlType, stringDate: dateDropOff})\n    };\n\n    const changeSelectedTime = (key) => {\n        setSelectedTime(key)\n        setSelectedTimeStart(timeOptions[key].startAt)\n        setSelectedTimeEnd(timeOptions[key].endAt)\n        updateStateSchedulingTime({ kind: controlType, \n                                    stringTimeStart: timeOptions[key].startAt, \n                                    stringTimeEnd: timeOptions[key].endAt})\n    };\n\n    const resetControl = () => {\n\n        setShowResumeInfo(false)\n\n        if(controlType === 'start'){\n            updateStateSchedulingStart({kind: 'end', stringDate: null})\n            setSelectedTime(null)\n        }\n    }\n\n    let tabsContent = timeOptions.map((timeOpt, index) => {\n        return <TimeOption \n                    listClasses={selectedTime === index ? 'timeOption openSelectedDetail' : 'timeOption'}\n                    key={index} \n                    trackKey={index}\n                    startAt={timeOpt.startAt} \n                    endAt={timeOpt.endAt} \n                    changeSelectedTime={changeSelectedTime}\n                    closeCalendar={closeCalendar}\n                />\n    });\n\n    useEffect(() => {\n        if(currentDate !== null){\n            setOpenTimeLayerDrop(false)\n            setShowResumeInfo(true)\n            setDateDropOff(currentDate)\n        }else{\n            if(controlType === 'end'){\n                setShowResumeInfo(false)\n                setSelectedTime(null)\n            }\n        }\n    }, [currentDate])\n\n    return (\n        <>\n            <div className={openDetailedBooking}>\n                <div className=\"dateAndTimeSelected\">\n                    <p className=\"dateSelected\">{dateDropOff}\n                        <br/>\n                        bwtween {selectedTimeStart} am - {selectedTimeEnd} am\n                    </p>\n                    <span className=\"iconEditTime\" onClick={() => resetControl() }>\n                    </span>\n                </div>\n                <div className={layerClassListDrop}>\n                    <div className={calendarControlClasses}>\n                        <DayPicker \n                            onDayClick={handleDayDropOff}\n                            // modifiers={{\n                            //     sunday: day => day.getDay() === 6,\n                            // }}\n                            disabledDays={[\n                                {\n                                    before: dateAvailable,\n                                },\n                                { daysOfWeek: [0, 5] }\n                            ]}\n                            // selectedDays={dateSuggested}\n                            selectedDays={[{\n                                after: new Date(2020, 2, 20),\n                                before: new Date(2020, 2, 25),\n                              }]}\n                        />\n                        <div className=\"hideCalendar\"></div>\n                    </div>\n                    <div className=\"timeLayer\">\n                        <br/>\n                        <p className=\"dateSelected\" onClick={() => setOpenTimeLayerDrop(false)}><span>&#60;</span>  {dateDropOff}</p>\n                        <div className=\"timeOptionsWrap\">\n                            {tabsContent}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}